Problem 1:
#include <stdio.h>

int main() {
    int m, n;
    printf("Enter number of rows and columns: ");
    scanf("%d%d", &m, &n);

    int A[m][n], B[m][n], C[m][n];

    printf("Enter elements of Matrix A:\n");
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &A[i][j]);

    printf("Enter elements of Matrix B:\n");
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &B[i][j]);

    printf("Sum Matrix (C = A + B):\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
            printf("%d ", C[i][j]);
        }
        printf("\n");
    }

    return 0;
}

Problem 2:
#include <stdio.h>

int main() {
    int m, p, n;
    printf("Enter rows of A, columns of A / rows of B, columns of B: ");
    scanf("%d%d%d", &m, &p, &n);

    int A[m][p], B[p][n], C[m][n];

    printf("Enter elements of Matrix A:\n");
    for (int i = 0; i < m; i++)
        for (int j = 0; j < p; j++)
            scanf("%d", &A[i][j]);

    printf("Enter elements of Matrix B:\n");
    for (int i = 0; i < p; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &B[i][j]);

    // Initialize result matrix C to 0
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = 0;

    // Matrix Multiplication
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            for (int k = 0; k < p; k++)
                C[i][j] += A[i][k] * B[k][j];

    printf("Resultant Matrix C = A × B:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++)
            printf("%d ", C[i][j]);
        printf("\n");
    }

    return 0;
}

Problem 3:
#include <stdio.h>

int main() {
    int m, n;
    printf("Enter rows and columns of matrix: ");
    scanf("%d%d", &m, &n);

    int A[m][n], T[n][m];

    printf("Enter matrix A:\n");
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &A[i][j]);

    // Transpose
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            T[j][i] = A[i][j];

    printf("Original Matrix:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++)
            printf("%d ", A[i][j]);
        printf("\n");
    }

    printf("Transposed Matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++)
            printf("%d ", T[i][j]);
        printf("\n");
    }

    return 0;
}

Problem 4:
#include <stdio.h>

#define MAX 10

// Function to get cofactor of mat[p][q] in temp[][]
void getCofactor(int mat[MAX][MAX], int temp[MAX][MAX], int p, int q, int n) {
    int i = 0, j = 0;

    for (int row = 0; row < n; row++) {
        for (int col = 0; col < n; col++) {
            if (row != p && col != q) {
                temp[i][j++] = mat[row][col];
                if (j == n - 1) {
                    j = 0;
                    i++;
                }
            }
        }
    }
}

// Recursive function to find determinant of matrix
int determinantOfMatrix(int mat[MAX][MAX], int n) {
    int D = 0;

    if (n == 1)
        return mat[0][0];

    int temp[MAX][MAX];
    int sign = 1;

    for (int f = 0; f < n; f++) {
        getCofactor(mat, temp, 0, f, n);
        D += sign * mat[0][f] * determinantOfMatrix(temp, n - 1);
        sign = -sign;
    }

    return D;
}

int main() {
    int n, mat[MAX][MAX];

    printf("Enter the order of square matrix (n x n): ");
    scanf("%d", &n);

    if (n > MAX || n <= 0) {
        printf("Matrix size out of supported range (1 to %d).\n", MAX);
        return 1;
    }

    printf("Enter elements of the matrix:\n");
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            scanf("%d", &mat[i][j]);

    int det = determinantOfMatrix(mat, n);
    printf("Determinant of the matrix is: %d\n", det);

    return 0;
}

Problem 5:
#include <stdio.h>

#define MAX 100

// Function to find saddle point in m × n matrix
int findSaddlePoint(int mat[MAX][MAX], int m, int n) {
    for (int i = 0; i < m; i++) {
        // Find the minimum element in row i
        int min_row = mat[i][0];
        int col_ind = 0;
        for (int j = 1; j < n; j++) {
            if (mat[i][j] < min_row) {
                min_row = mat[i][j];
                col_ind = j;
            }
        }

        // Check if the minimum is also the maximum in its column
        int isSaddle = 1;
        for (int k = 0; k < m; k++) {
            if (mat[k][col_ind] > min_row) {
                isSaddle = 0;
                break;
            }
        }

        // If found
        if (isSaddle) {
            printf("Saddle Point found: %d at position (%d, %d)\n", min_row, i, col_ind);
            return 1;
        }
    }

    // No saddle point found
    return 0;
}

int main() {
    int m, n;
    int mat[MAX][MAX];

    printf("Enter number of rows and columns: ");
    scanf("%d%d", &m, &n);

    printf("Enter the matrix elements (%d × %d):\n", m, n);
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &mat[i][j]);

    if (!findSaddlePoint(mat, m, n))
        printf("No Saddle Point found.\n");

    return 0;
}
